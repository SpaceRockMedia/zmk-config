
#include "../zmk-nodefree-config/keypos_def/keypos_60keys.h"

/* source the main keymap */
#include "base.keymap"

/*
 * tap and action ideas

 - MEH to open apps
 - Make the num row F keys always, hold for number, and use vertical combos for symbols?
 - MEHM as a hold version?
 - CAPSWORD on double tap space?
 - double tap layer to make it sticky
    - &to ? or sticky layers?
 - other layers should keep ESC to always reactivate $mo DEF
 - If sticky layers are active, make it possible to still sticky other layers in case the
   wrong layer was stickied
 - Hold num keys for F keys, or keep them as shift for symbol? Maybe hold top row?
 - vertical combos for nmber symbols
 - top row numbers should always allow for AS() shifting for symbol access. and TAB
 - programming layer for things like == != <= >= => -> <- |>
 - Should nav keys (HJKL) be on both sides with a layer key in case i need to do nav with
   that hand, and to allow for nav with mouse?
 - more use of combos to allow for better use of layers
 - Look into COLEMAK-dh digraph combos? Th, tion, ese, Sh, Ch, etc
   - maybe also something like a combo for TH -> the, WH -> where.
   - or maybe they should be developer based. IF -> `if :\n` and placing cursor before :
     - this might be better as a vscode keymap?
     - maybe a devmode toggle to enable things like this?
 - Combos on number layer for equation/time/currency symbols reduce layer switches.
 - any key rolled into "-" sends a macro (sort if like inverse of cli switches.)
 - leader keys? would this be a rolling maneuver and conflict with things?
 - key combos for killing apps!
 - Semantic keys. avoid os specific shortcuts like ctrl+c/cmd+c and use combos or keys
   tied to some mod key like alt, meh, hyp, etc.
   - Define custom keycodes (like how QMK does it), but in ZMK I think I need a `#define` ?
   - https://www.reddit.com/r/ErgoMechKeyboards/comments/zfomr0/comment/iziinp0/?context=3
   -
 - can features/mods/combos/etc be enabled or disabled based on app focused?
   maybe we just have a toggle for them as a single layer so only one can be focused at a time?
 - macro to enable CAPS_WORD and replace SHFT with "_"
 - layer to output common strings like emails
 - Hold BSPC for layer rather than LC(BSPC) or DEL actions?
 - Maybe tap+hold does word backspace, or double tap
 - home, end, pg up/down on bottom row so top row still works with combos?
 - alt+tab key. Hold tab? or tap+hold?
 - tap dance/tap hold rather than &kp ) for number layer?
 - Game mode where only needing left half for gaming with mouse. WASD/WARS for nav.
 */

/*
 * CONDITIONAL LAYERS
 */
// ZMK_CONDITIONAL_LAYER(DEF NAV, CNF)

/*
 * HOLD TAPS
 */
// https://zmk.dev/docs/behaviors/hold-tap
// ZMK_BEHAVIOR(as, hold_tap,
//     flavor = "balanced";   // was 'tap-=preferred'
//     tapping-term-ms = <225>;
//     quick-tap-ms = <125>;
//     bindings = <&kp>, <&kp>;
// )
// #define AS(keycode) &kp LS(keycode) keycode // Autoshift Macro

/*
 * MOD MORPH
 * https://zmk.dev/docs/behavrs/mod-morph
 */
// ZMK_BEHAVIOR(bdel, mod_morph,
//     bindings = <&kp BSPC>, <&kp DEL>;
//     mods     = <(MOD_LSFT | MOD_RSFT)>;
// )

/*
 * MACROS
 * https://zmk.dev/docs/behaviors/macros
 */

// ZMK_BEHAVIOR(layer_light, macro,
//     wait-ms = <0>;
//     tap-ms = <0>;
//     bindings
//         = <&macro_press &mo NAV>
//         , <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,100)>
//         , <&macro_pause_for_release>
//         , <&macro_release &mo NAV>
//         , <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,50)>;
// )

// ZMK_BEHAVIOR(swap, macro,
//     wait-ms = <100>;
//     tap-ms = <100>;
//     bindings
//         = <&macro_press &kp LALT &kp TAB>
//         , <&macro_press &mo NAV>
//         , <&macro_pause_for_release>
//         , <&macro_release &mo NAV>
//         , <&macro_release &kp LALT &kp TAB>;
// )

// This seems really neat but in my editors, it already adds the closing brace
// keeping this here incase I want to do similar actions for other things.
// ZMK_BEHAVIOR(m_par, macro,
//     wait-ms = <190>;
//     tap-ms = <0>;
//     bindings
//         = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
// )

/*
 * HYPER
 */

// HYP/MEH could work well with sticky keys $sk
// https://zmk.dev/docs/behaviors/sticky-key
// In app shortcuts
#define HYP LS(LC(LA(LGUI)))
#define HY(keycode) LS(LC(LA(LG(keycode))))

// Global shoftcuts such as opening apps, copy/cut/paste?
#define MEH LS(LC(LALT))
// #define MEHM(key)  LS(LC(LA(key)))


    // Activate CNF layer by pressing raise and lower
  // conditional_layers {
  //     compatible = "zmk,conditional-layers";
    //     cnf_layer {
  //         if-layers = <NAV SYM>;
  //         then-layer = <CNF>;
  //     };
  // };

/*
 * KEYMAPS
 */

ZMK_LAYER(ColemakDH,
//╭───────────┬────────┬────────┬─────────┬───────┬─────────────╮                                ╭──────────────┬───────┬─────────┬────────┬─────────┬──────────╮
   &kp GRAVE   &kp F1   &kp F2   &kp F3    &kp F4  &kp F5                                         &kp F6         &kp F7  &kp F8    &kp F9   &kp F10   &kp F11
//├───────────┼────────┼────────┼─────────┼───────┼─────────────┤                                ├──────────────┼───────┼─────────┼────────┼─────────┼──────────┤
   &lt CNF TAB &kp Q    &kp W    &kp F     &kp P   &kp B                                          &kp J          &kp L   &kp U     &kp Y    &kp SEMI  &kp F12
//├───────────┼────────┼────────┼─────────┼───────┼─────────────┤                                ├──────────────┼───────┼─────────┼────────┼─────────┼──────────┤
   &kp ESC     &kp A    &kp R    &kp S     &kp T   &kp G                                          &kp M          &kp N   &kp E     &kp I    &kp O     &kp SQT
//├───────────┼────────┼────────┼─────────┼───────┼─────────────┼───────────────╮ ╭──────────────┼──────────────┼───────┼─────────┼────────┼─────────┼──────────┤
   &kp LCTRL   &kp Z    &kp X    &kp C     &kp D   &kp V         &kp C_PP          &kp C_MUTE     &kp K          &kp H   &kp COMMA &kp DOT  &kp FSLH  &kp RCTRL
//╰───────────┴────────┼────────┼─────────┼───────┼─────────────┼───────────────┤ ├──────────────┼──────────────┼───────┼─────────┼────────┼─────────┴──────────╯
                        &kp LGUI &kp LALT  &mo NAV &mt HYP SPACE &mt LSHFT $bopen  &mt RSHFT $bclose &mt MEH RET    &mo FUN &kp RALT  ___
//                     ╰────────┴─────────┴───────┴─────────────┴───────────────╯ ╰──────────────┴──────────────┴───────┴─────────┴────────╯
, &inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN
)

ZMK_LAYER(NAV,
//╭───────────┬──────────┬────────────┬──────────┬───────────┬─────────────╮                               ╭──────────────┬───────────┬──────────┬────────────┬───────────┬──────────╮
   ___         ___        ___          ___        ___         ___                                           ___            ___         ___        ___          ___         &kp C_SLEEP
//├───────────┼──────────┼────────────┼──────────┼───────────┼─────────────┤                               ├──────────────┼───────────┼──────────┼────────────┼───────────┼──────────┤
   ___         ___        ___          ___        ___         ___                                           &kp PG_UP      HY(LEFT)    &kp UP     HY(RIGHT)    HY(UP)      &kp PSCRN
//├───────────┼──────────┼────────────┼──────────┼───────────┼─────────────┤                               ├──────────────┼───────────┼──────────┼────────────┼───────────┼──────────┤
   &caps_word  ___        ___          ___        ___         ___                                           &kp PG_DN      &kp LEFT    &kp DOWN   &kp RIGHT    HY(DOWN)    ___
//├───────────┼──────────┼────────────┼──────────┼───────────┼─────────────┤╭─────────────╮ ╭─────────────╮├──────────────┼───────────┼──────────┼────────────┼───────────┼──────────┤
   ___         &kp LC(Z)  &kp LC(X)    &kp LC(C)  ___         &kp LC(V)      ___             ___            ___            NAV_BSPC    ___        NAV_DEL      ___         ___
//╰───────────┴──────────┼────────────┼──────────┼───────────┼─────────────┤├─────────────┤ ├─────────────┤├──────────────┼───────────┼──────────┼────────────┼───────────┴──────────╯
                          ___          ___        ___         ___            ___             &kp RBRC       ___            ___         ___        &kp LC(BSPC)
//                       ╰────────────┴──────────┴───────────┴─────────────╯╰─────────────╯ ╰─────────────╯╰──────────────┴───────────┴──────────┴────────────╯
, &inc_dec_kp DOWN UP &inc_dec_kp C_NEXT C_PREV
)

#define LIKE HY(PG_UP)
#define SUCK HY(PG_DN)

ZMK_LAYER(Func,
//╭───────────┬──────────┬────────────┬──────────┬───────────┬─────────────╮                               ╭──────────────┬───────────┬──────────┬────────────┬───────────┬──────────╮
   ___         ___        ___          ___        ___         ___                                           LIKE           ___         ___        ___          ___         ___
//├───────────┼──────────┼────────────┼──────────┼───────────┼─────────────┤                               ├──────────────┼───────────┼──────────┼────────────┼───────────┼──────────┤
   ___         ___        ___          ___        ___         ___                                           SUCK           &kp C_PREV  &kp C_PP   &kp C_NEXT   ___         ___
//├───────────┼──────────┼────────────┼──────────┼───────────┼─────────────┤                               ├──────────────┼───────────┼──────────┼────────────┼───────────┼──────────┤
   ___         ___        ___          ___        ___         ___                                           ___            ___         ___        ___          ___         ___
//├───────────┼──────────┼────────────┼──────────┼───────────┼─────────────┤╭─────────────╮ ╭─────────────╮├──────────────┼───────────┼──────────┼────────────┼───────────┼──────────┤
   ___         ___        ___          ___        ___         ___            ___             ___            ___            ___         ___        ___          ___         ___
//╰───────────┴──────────┼────────────┼──────────┼───────────┼─────────────┤├─────────────┤ ├─────────────┤├──────────────┼───────────┼──────────┼────────────┼───────────┴──────────╯
                          ___          ___        ___         ___            &kp LBRC        ___            ___            ___         ___        ___
//                       ╰────────────┴──────────┴───────────┴─────────────╯╰─────────────╯ ╰─────────────╯╰──────────────┴───────────┴──────────┴────────────╯
, &inc_dec_kp DOWN UP &inc_dec_kp C_NEXT C_PREV
)

// ZMK_LAYER(sym_layer,
//     // ╭─────┬─────┬─────┬─────┬─────┬─────╮                 ╭─────┬─────┬─────┬─────┬─────┬──────╮
//     // |  `  | F1  | F2  | F3  | F4  |  F5 |                 |  F6 |  F7 |  F8 |  F9 | F10 | F11  |
//     // ├─────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
//     // |     | !   | @   | #   | $   |  %  |                 |  ^  |  &  |  *  |     |     | F12  |
//     // ├─────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
//     // |     |     |     |     |     |  +  |                 |  -  |     |     |     |     |      |
//     // ├─────┼─────┼─────┼─────┼─────┼─────┤───────╮ ╭───────┤─────┼─────┼─────┼─────┼─────┼──────┤
//     // |     |     |     |     |     |  =  |       | |       |  _  |     |     |     |     |      |
//     // ╰─────┴─────┼─────┼─────┼─────┼─────┤───────┤ ├───────┼─────┼─────┼─────┼─────┼─────┴──────╯
//     //             |     |     |     |  [  |  {    | |       |     |     |     |     |
//     //             ╰─────┴─────┴─────┴─────┴───────╯ ╰───────┴─────┴─────┴─────┴─────╯
//     &kp GRAVE &kp F1   &kp F2    &kp F3      &kp F4    &kp F5                        &kp F6    &kp F7   &kp F8    &kp F9 &kp F10  &kp F11
//     ___       &kp EXCL &kp AT    &kp HASH    &kp DLLR  &kp PRCNT                     &kp CARET &kp AMPS &kp ASTRK ___    ___      &kp F12
//     ___       ___      ___       ___         ___       &kp KP_PLUS                   &kp MINUS ___      ___       ___    ___      ___
//     ___       ___      ___       ___         ___       &kp EQUAL   ___       ___     &kp UNDER ___      ___       ___    ___      ___
//                        ___       ___         ___       &kp LBKT    &kp LBRC  ___     ___       ___      ___       ___
//     , &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
// )

// ZMK_LAYER(dig_layer,
//     // ╭───────┬───────┬───────┬───────┬───────┬───────╮                 ╭───────┬───────┬───────┬───────┬───────┬───────╮
//     // |       |       |       |       |       |       |                 |       |       |       |       |       |       |
//     // ├───────┼───────┼───────┼───────┼───────┼───────┤                 ├───────┼───────┼───────┼───────┼───────┼───────┤
//     // |       |  qu   |       |       |       |       |                 |       |       |       |       |       |       |
//     // ├───────┼───────┼───────┼───────┼───────┼───────┤                 ├───────┼───────┼───────┼───────┼───────┼───────┤
//     // |       |       |       |  sh   |  th   |       |                 |       |       |       | ing   |       |       |
//     // ├───────┼───────┼───────┼───────┼───────┼───────┼───────╮ ╭───────┤───────┼───────┼───────┼───────┼───────┼───────┤
//     // |       |       |       |       |       |       |       | |       |       |       |       |       |       |       |
//     // ╰───────┴───────┼───────┼───────┼───────┼───────┼───────┤ ├───────┼───────┼───────┼───────┼───────┼───────┴───────╯
//     //                 |       |       |       |       |       | |       |       |       |       |       |
//     //                 ╰───────┴───────┴───────┴───────┴───────╯ ╰───────┴───────┴───────┴───────┴───────╯
//     &kp GRAVE &kp F1   &kp F2    &kp F3      &kp F4    &kp F5                        &kp F6    &kp F7   &kp F8    &kp F9 &kp F10  &kp F11
//     ___       &kp EXCL &kp AT    &kp HASH    &kp DLLR  &kp PRCNT                     &kp CARET &kp AMPS &kp ASTRK ___    ___      &kp F12
//     ___       ___      ___       ___         ___       &kp KP_PLUS                   &kp MINUS ___      ___       ___    ___      ___
//     ___       ___      ___       ___         ___       &kp EQUAL   ___       ___     &kp UNDER ___      ___       ___    ___      ___
//                        ___       ___         ___       &kp LBKT    &kp LBRC  ___     ___       ___      ___       ___
//     , &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
// )

// #define POW(keycode) &ext_power keycode;
// #define UG(keycode) &rgb_ug keycode;

// #define BTS(index) &bt BT_SEL index;
//╭────────────┬───────────┬───────────┬───────────┬───────────┬───────────╮                          ╭────────────┬───────────┬───────────┬───────────┬────────────┬───────────╮
//├────────────┼───────────┼───────────┼───────────┼───────────┼───────────┤                          ├────────────┼───────────┼───────────┼───────────┼────────────┼───────────┤
//├────────────┼───────────┼───────────┼───────────┼───────────┼───────────┤                          ├────────────┼───────────┼───────────┼───────────┼────────────┼───────────┤
//├────────────┼───────────┼───────────┼───────────┼───────────┼───────────┼───────────╮ ╭────────────┼────────────┼───────────┼───────────┼───────────┼────────────┼───────────┤
//╰────────────┴───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤ ├────────────┴────────────┼───────────┼───────────┼───────────┼────────────┼───────────╯
//                         ╰───────────┴───────────┴───────────┴───────────┴───────────╯ ╰────────────┴────────────┴───────────┴───────────┴───────────╯
ZMK_LAYER(Conf,
   &none          &none           &none           &none           &none           &none                                               &none &none &none &none &none &none
   &none          &rgb_ug RGB_EFF &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI                                     &none &none &none &none &none &none
   &out OUT_TOG   &rgb_ug RGB_EFR &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD                                     &none &none &none &none &none &none
   &bt BT_CLR     &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4     &rgb_ug RGB_TOG &ext_power EP_TOG  &none &none &none &none &none &none
                                    &none          &none          &none          &none             &none           &none              &none &none &none &none
, &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)
