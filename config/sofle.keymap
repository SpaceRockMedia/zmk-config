/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include "../zmk-nodefree-config/helper.h"

#define DEF 0
// #define QWERTY 1
#define NAV 1
#define SYM 2
#define CNF 3

/*
 * tap and action ideas

 - MEH to open apps
 - MEHM as a hold version?
 - CAPSWORD on double tap space?
 - double tap layer to make it sticky
    - &to ? or sticky layers?
 - other layers should keep ESC to always reactivate $mo DEF
 - If sticky layers are active, make it possible to still sticky other layers in case the
   wrong layer was stickied
 - Hold num keys for F keys, or keep them as shift for symbol? Maybe hold top row?
 - vertical combos for nmber symbols
 - top row numbers should always allow for AS() shifting for symbol access. and TAB
 - programming layer for things like == != <= >= => -> <- |>
 - Should nav keys (HJKL) be on both sides with a layer key in case i need to do nav with
   that hand, and to allow for nav with mouse?
 - more use of combos to allow for better use of layers
 - Look into COLEMAK-dh digraph combos? Th, tion, ese, Sh, Ch, etc
   - maybe also something like a combo for TH -> the, WH -> where.
   - or maybe they should be developer based. IF -> `if :\n` and placing cursor before :
     - this might be better as a vscode keymap?
     - maybe a devmode toggle to enable things like this?
 - Combos on number layer for equation/time/currency symbols reduce layer switches.
 - any key rolled into "-" sends a macro (sort if like inverse of cli switches.)
 - leader keys? would this be a rolling maneuver and conflict with things?
 - key combos for killing apps!
 - Semantic keys. avoid os specific shortcuts like ctrl+c/cmd+c and use combos or keys
   tied to some mod key like alt, meh, hyp, etc.
   - Define custom keycodes (like how QMK does it), but in ZMK I think I need a `#define` ?
   - https://www.reddit.com/r/ErgoMechKeyboards/comments/zfomr0/comment/iziinp0/?context=3
   -
 - can features/mods/combos/etc be enabled or disabled based on app focused?
   maybe we just have a toggle for them as a single layer so only one can be focused at a time?
 - macro to enable CAPS_WORD and replace SHFT with "_"
 - layer to output common strings like emails
 - Hold BSPC for layer rather than LC(BSPC) or DEL actions?
 - Maybe tap+hold does word backspace, or double tap
 - home, end, pg up/down on bottom row so top row still works with combos?
 - alt+tab key. Hold tab? or tap+hold?
 - tap dance/tap hold rather than &as ) for number layer?
 - Game mode where only needing left half for gaming with mouse. WASD/WARS for nav.
 -
 */

/*
 * CONDITIONAL LAYERS
 */
// ZMK_CONDITIONAL_LAYER(DEF NAV, CNF)

/*
 * HOLD TAPS
 */
// https://zmk.dev/docs/behaviors/hold-tap
ZMK_BEHAVIOR(as, hold_tap,
    flavor = "balanced";   // was 'tap-=preferred'
    tapping-term-ms = <225>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)
// #define AS(keycode) &as LS(keycode) keycode // Autoshift Macro

/*
 * MOD MORPH
 * https://zmk.dev/docs/behavrs/mod-morph
 */
ZMK_BEHAVIOR(bdel, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods     = <(MOD_LSFT | MOD_RSFT)>;
)

/*
 * MACROS
 * https://zmk.dev/docs/behaviors/macros
 */

// ZMK_BEHAVIOR(layer_light, macro,
//     wait-ms = <0>;
//     tap-ms = <0>;
//     bindings
//         = <&macro_press &mo NAV>
//         , <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,100)>
//         , <&macro_pause_for_release>
//         , <&macro_release &mo NAV>
//         , <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,50)>;
// )

// ZMK_BEHAVIOR(m_par, macro,
//     wait-ms = <190>;
//     tap-ms = <0>;
//     bindings
//         = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
// )

/*
 * MISC
 */

// HYP/MEH could work well with sticky keys $sk
// https://zmk.dev/docs/behaviors/sticky-key
// In app shortcuts
#define HYP LS(LC(LA(LGUI)))
// #define HYPER(key) LS(LC(LA(LG(key))))

// Global shoftcuts such as opening apps, copy/cut/paste?
#define MEH LS(LC(LALT))
// #define MEHM(key)  LS(LC(LA(key)))


    // Activate CNF layer by pressing raise and lower
  // conditional_layers {
  //     compatible = "zmk,conditional-layers";
    //     cnf_layer {
  //         if-layers = <NAV SYM>;
  //         then-layer = <CNF>;
  //     };
  // };

/*
 * KEYMAPS
 */
#define ______ &trans

ZMK_LAYER(default_layer,
    // ╭──────┬─────┬─────┬─────┬─────┬─────╮                 ╭─────┬─────┬─────┬─────┬─────┬──────╮
    // | `    |  1  |  2  |  3  |  4  |  5  |                 |  6  |  7  |  8  |  9  |  0  | BSPC |
    // ├──────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
    // | TAB  |  Q  |  W  |  F  |  P  |  B  |                 |  J  |  L  |  U  |  Y  |  ;  | BSLH |
    // ├──────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
    // | ESC  |  A  |  R  |  S  |  T  |  G  |                 |  M  |  N  |  E  |  I  |  O  | '    |
    // ├──────┼─────┼─────┼─────┼─────┼─────┤───────╮ ╭───────┤─────┼─────┼─────┼─────┼─────┼──────┤
    // | SHFT |  Z  |  X  |  C  |  D  |  V  |  ||>  | | MUTE  |  K  |  H  |  ,  |  .  |  /  | SHFT |
    // ╰──────┴─────┼─────┼─────┼─────┼─────┤───────┤ ├───────┼─────┼─────┼─────┼─────┼─────┴──────╯
    //              | GUI | ALT | CTRL| LWR | SPACE | | ENTER | RSE | CTRL| ALT | GUI |
    //              ╰─────┴─────┴─────┴─────┴───────╯ ╰───────┴─────┴─────┴─────┴─────╯
    &as GRAVE   &as N1 &as N2   &as N3   &as N4  &as N5                                      &as N6      &as N7  &as N8    &as N9  &as N0   &kp BSPC
    &mt CNF TAB &kp Q  &kp W    &kp F    &kp P   &kp B                                       &kp J       &kp L   &kp U     &kp Y   &kp SEMI &kp BSLH
    &kp ESC     &kp A  &kp R    &kp S    &kp T   &kp G                                       &kp M       &kp N   &kp E     &kp I   &kp O    &kp SQT
    &kp LCTRL   &kp Z  &kp X    &kp C    &kp D   &kp V         &kp C_PP       &kp C_MUTE     &kp K       &kp H   &kp COMMA &kp DOT &kp FSLH &kp RCTRL
                       &kp LGUI &kp LALT &mo NAV &mt HYP SPACE &mt LSHFT LPAR &mt RSHFT RPAR &mt MEH RET &mo SYM &kp RALT  &bdel
    , &inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN
)

// ZMK_LAYER( // QWERTY
//     // ╭──────┬─────┬─────┬─────┬─────┬─────╮                 ╭─────┬─────┬─────┬─────┬─────┬──────╮
//     // | `    |  1  |  2  |  3  |  4  |  5  |                 |  6  |  7  |  8  |  9  |  0  |      |
//     // ├──────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
//     // | TAB  |  Q  |  W  |  E  |  R  |  T  |                 |  Y  |  U  |  I  |  O  |  P  | BSPC |
//     // ├──────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
//     // | ESC  |  A  |  S  |  D  |  F  |  G  |                 |  H  |  J  |  K  |  L  |  ;  | '    |
//     // ├──────┼─────┼─────┼─────┼─────┼─────┤───────╮ ╭───────┤─────┼─────┼─────┼─────┼─────┼──────┤
//     // | SHFT |  Z  |  X  |  C  |  V  |  B  |  MUTE | | MUTE  |  N  |  M  |  ,  |  .  |  /  | SHFT |
//     // ╰──────┴─────┼─────┼─────┼─────┼─────┤───────┤ ├───────┼─────┼─────┼─────┼─────┼─────┴──────╯
//     //              | GUI | ALT | CTRL| NAV | ENTER | | SPACE | SYM | CTRL| ALT | GUI |
//     //              ╰─────┴─────┴─────┴─────┴───────╯ ╰───────┴─────┴─────┴─────┴─────╯
//     default_layer,
//     &as GRAVE)    &as N1) &as N2)   &as N3)   &as N4)  &as N5)                                      &as N6)      &as N7)  &as N8)    &as N9)  &as N0)   &kp BSPC
//     &mt CNF TAB &kp Q  &kp W    &kp E    &kp R   &kp T                                       &kp Y       &kp U   &kp I     &kp O   &kp P    &kp BSLH
//     &kp ESC      &kp A  &kp S    &kp D    &kp F   &kp G                                       &kp H       &kp J   &kp K     &kp L   &kp SEMI &kp SQT
//     &kp LCTRL    &kp Z  &kp X    &kp C    &kp V   &kp B         &kp C_PP       &kp C_MUTE     &kp N       &kp M   &kp COMMA &kp DOT &kp FSLH &kp RSHFT
//                         &kp LGUI &kp LALT &mo NAV &mt HYP SPACE &mt LSHFT LPAR &mt RSHFT RPAR &mt MEH RET &mo SYM &kp RALT  &bdel,
//     , &inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN
// )

ZMK_LAYER(nav_layer,
    // ╭──────┬─────┬─────┬─────┬─────┬─────╮                 ╭─────┬─────┬─────┬─────┬─────┬──────╮
    // |      |     |     |     |     |     |                 |     |     |     |     |     | Sleep|
    // ├──────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
    // |      |     |     |     |     |     |                 | HOME|PG_DN|PG_UP| END |     |      |
    // ├──────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
    // | CAPS |     |     |     |     |     |                 | <-  |  v  |  ^  | ->  |     |      |
    // ├──────┼─────┼─────┼─────┼─────┼─────┤───────╮ ╭───────┤─────┼─────┼─────┼─────┼─────┼──────┤
    // |      | UNDO| CUT | COPY| PSTE|     |       | |       |     |     |     |     |     |      |
    // ╰──────┴─────┼─────┼─────┼─────┼─────┤───────┤ ├───────┼─────┼─────┼─────┼─────┼─────┴──────╯
    //              |     |     |     |     |       | |    }  |  ]  |     |     | BSPC|
    //              ╰─────┴─────┴─────┴─────┴───────╯ ╰───────┴─────┴─────┴─────┴─────╯
    ______     ______     ______    ______     ______      ______                   ______   ______    ______    ______       ______    &kp C_SLEEP
    ______     ______     ______    ______     ______      ______                   &kp HOME &kp PG_DN &kp PG_UP &kp END      &kp PSCRN ______
    &caps_word ______     ______    ______     ______      ______                   &kp LEFT &kp DOWN  &kp UP    &kp RIGHT    ______    ______
    ______     &kp K_UNDO &kp K_CUT &kp K_COPY &kp K_PASTE ______ ______   ______   ______   ______    ______    ______       ______    ______
                          ______    ______     ______      ______ ______   &kp RBRC &kp RBKT ______    ______    &kp LC(BSPC)
    , &inc_dec_kp DOWN UP &inc_dec_kp C_NEXT C_PREV
)

ZMK_LAYER(sym_layer,
    // ╭─────┬─────┬─────┬─────┬─────┬─────╮                 ╭─────┬─────┬─────┬─────┬─────┬──────╮
    // |  `  | F1  | F2  | F3  | F4  |  F5 |                 |  F6 |  F7 |  F8 |  F9 | F10 | F11  |
    // ├─────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
    // |     | !   | @   | #   | $   |  %  |                 |  ^  |  &  |  *  |     |     | F12  |
    // ├─────┼─────┼─────┼─────┼─────┼─────┤                 ├─────┼─────┼─────┼─────┼─────┼──────┤
    // |     |     |     |     |     |  +  |                 |  -  |     |     |     |     |      |
    // ├─────┼─────┼─────┼─────┼─────┼─────┤───────╮ ╭───────┤─────┼─────┼─────┼─────┼─────┼──────┤
    // |     |     |     |     |     |  =  |       | |       |  _  |     |     |     |     |      |
    // ╰─────┴─────┼─────┼─────┼─────┼─────┤───────┤ ├───────┼─────┼─────┼─────┼─────┼─────┴──────╯
    //             |     |     |     |  [  |  {    | |       |     |     |     |     |
    //             ╰─────┴─────┴─────┴─────┴───────╯ ╰───────┴─────┴─────┴─────┴─────╯
    &kp GRAVE &kp F1   &kp F2    &kp F3      &kp F4    &kp F5                        &kp F6    &kp F7   &kp F8    &kp F9 &kp F10  &kp F11
    ______    &kp EXCL &kp AT    &kp HASH    &kp DLLR  &kp PRCNT                     &kp CARET &kp AMPS &kp ASTRK ______ ______   &kp F12
    ______    ______   ______    ______      ______    &kp KP_PLUS                   &kp MINUS ______   ______    ______ ______   ______
    ______    ______   ______    ______      ______    &kp EQUAL   ______    ______  &kp UNDER ______   ______    ______ ______   ______
                       ______    ______      ______    &kp LBKT    &kp LBRC  ______  ______    ______   ______    ______
    , &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)

ZMK_LAYER(cnf_layer,
    // ╭───────┬───────┬───────┬───────┬───────┬───────╮                 ╭───────┬───────┬───────┬───────┬───────┬───────╮
    // |BTCLR  |  BT1  |  BT2  |  BT3  |  BT4  |  BT5  |                 |       |   7   |   8   |   9   |   +   | Sleep |
    // ├───────┼───────┼───────┼───────┼───────┼───────┤                 ├───────┼───────┼───────┼───────┼───────┼───────┤
    // |EXTPWR |RGB_EFF|RGB_HUI|RGB_SAI|RGB_BRI|RGB_SPI|                 |       |   4   |   5   |   6   |   -   | Ins   |
    // ├───────┼───────┼───────┼───────┼───────┼───────┤                 ├───────┼───────┼───────┼───────┼───────┼───────┤
    // |       |RGB_EFR|RGB_HUD|RGB_SAD|RGB_BRD|RGB_SPD|                 |       |   1   |   2   |   3   |   *   | Scroll|
    // ├───────┼───────┼───────┼───────┼───────┼───────┼───────╮ ╭───────┤───────┼───────┼───────┼───────┼───────┼───────┤
    // |OUT_TOG|       |       |       |       |       |RGB_TOG| |       |       |   0   |   =   |   .   |   /   | Num   |
    // ╰───────┴───────┼───────┼───────┼───────┼───────┼───────┤ ├───────┼───────┼───────┼───────┼───────┼───────┴───────╯
    //                 |       |       |       |       |       | |       |       |       |       |       |
    //                 ╰───────┴───────┴───────┴───────┴───────╯ ╰───────┴───────┴───────┴───────┴───────╯

    &bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                           &none &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_PLUS     &kp C_SLEEP
    &ext_power EP_TOG &rgb_ug RGB_EFF &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI                        &none &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_MINUS    &kp INS
    &none             &rgb_ug RGB_EFR &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD                        &none &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_ASTERISK &kp SLCK
    &out OUT_TOG      &none           &none           &none           &none           &none           &rgb_ug RGB_TOG  &none &none &kp KP_N0 &kp EQUAL &kp KP_DOT &kp KP_SLASH    &kp KP_NUM
                                      &none           ______          ______          &none           &none            &none &none &none     &none     &none
    , &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)
