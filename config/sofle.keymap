/*conf
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include "../zmk-nodefree-config/helper.h"

#define BASE 0
// #define QWERTY 1
#define LOWER 1
#define SYM 2
#define CONF  3


/*
 * CONDITIONAL LAYERS
 */
// ZMK_CONDITIONAL_LAYER(BASE NAV, CONF)

/*
 * HOLD TAPS
 */
// https://zmk.dev/docs/behaviors/hold-tap
ZMK_BEHAVIOR(as, hold_tap,
    flavor = "balanced";   // was 'tap-=preferred'
    tapping-term-ms = <225>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)
#define AS(keycode) &as LS(keycode) keycode // Autoshift Macro

/*
 * MOD MORPH
 * https://zmk.dev/docs/behavrs/mod-morph
 */
ZMK_BEHAVIOR(bdel, mod_morph,
    flavor = "balanced";
    global-quick-tap;
    bindings = <&kp BSPC>, <&kp DEL>;
    mods     = <(MOD_LSFT | MOD_RSFT)>;
)

/*
 * MISC
 */
#define HYP LS(LC(LA(LGUI)))
// #define HYPER(key) LS(LC(LA(LG(key))))
#define MEH LS(LC(LALT))
// #define MEHM(key)  LS(LC(LA(key)))


    // Activate CONF layer by pressing raise and lower
  // conditional_layers {
  //     compatible = "zmk,conditional-layers";
  //     conf_layer {
  //         if-layers = <LOWER SYM>;
  //         then-layer = <CONF>;
  //     };
  // };

/*
 * KEYMAPS
 */
// key positions
/* -------------------------------------------------------------------------------------
*  |  0  |  1  |  2  |  3  |  4  |  5  |           |  6  |  7  |  8  |  9  |  10 |  11 |
*  |  12 |  13 |  14 |  15 |  16 |  17 |           |  18 |  19 |  20 |  21 |  22 |  23 |
*  |  24 |  25 |  26 |  27 |  28 |  29 |           |  30 |  31 |  32 |  33 |  34 |  35 |
*  |  36 |  37 |  38 |  39 |  40 |  41 |  42 |  43 |  44 |  45 |  46 |  47 |  48 |  49 |
*              |  50 |  51 |  52 |  53 |  54 |  55 |  56 |  57 |  58 |  59 |
*/



/ {
  keymap {
    compatible = "zmk,keymap";
    default_layer {
      // .----------------------------------------.                   .---------------------------------------------.
      // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   | BKSPC |
      // |  TAB  |  Q  |  W  |  F   |  P   |  B   |                   |  J   |  L    |  U    |  Y   |   ;   | BSLH  |
      // |  ESC  |  A  |  R  |  S   |  T   |  G   |                   |  M   |  N    |  E    |  I   |   O   |   '   |
      // | SHIFT |  Z  |  X  |  C   |  D   |  V   |  C_PP  |  | MUTE  |  K   |  H    |  ,    |  .   |   /   | SHIFT |
      //               | GUI | ALT  | CTRL | LOWER|  SPACE |  | ENTER | SYM| CTRL  | ALT   | GUI  |
      bindings = <
          // clang-format off
AS(GRAVE)    AS(N1) AS(N2)    AS(N3)   AS(N4)    AS(N5)                                        AS(N6)      AS(N7)    AS(N8)    AS(N9)  AS(N0)   &kp BSPC
&mt CONF TAB &kp Q  &kp W     &kp F    &kp P     &kp B                                         &kp J       &kp L     &kp U     &kp Y   &kp SEMI &kp BSLH
&kp ESC      &kp A  &kp R     &kp S    &kp T     &kp G                                         &kp M       &kp N     &kp E     &kp I   &kp O    &kp SQT
&kp LCTRL    &kp Z  &kp X     &kp C    &kp D     &kp V         &kp C_PP         &kp C_MUTE     &kp K       &kp H     &kp COMMA &kp DOT &kp FSLH &kp RCTRL
                    &kp LGUI  &kp LALT &mo LOWER &mt HYP SPACE &mt LSHFT LPAR   &mt RSHFT RPAR &mt MEH RET &mo SYM &kp RALT  &bdel
          // clang-format on
          >;

      sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN>;
    };

    // qwerty_layer {
    // .----------------------------------------.                   .---------------------------------------------.
    // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
    // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
    // |  ESC  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
    // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  | MUTE  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
    //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | SYM| CTRL  | ALT   | GUI  |
    //             bindings = <
    // clang-format off
// &kp GRAVE &kp N1 &kp N2   &kp N3    &kp N4    &kp N5                           &kp N6     &kp N7   &kp N8    &kp N9   &kp N0   &kp BSPC
// &kp TAB   &kp Q  &kp W    &kp E     &kp R     &kp T                            &kp Y      &kp U    &kp I     &kp O    &kp P    &kp BSLH
// &kp ESC   &kp A  &kp S    &kp D     &kp F     &kp G                            &kp H      &kp J    &kp K     &kp L    &kp SEMI &kp SQT
// &kp LSHFT &kp Z  &kp X    &kp C     &kp V     &kp B      &kp C_PP   &kp C_MUTE &kp N      &kp M    &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
//                  &kp LGUI &kp LCTRL &kp LALT  &mo LOWER  &kp RET    &kp SPACE  &mo SYM  &kp RALT &kp RCTRL &to CONF
    // clang-format on
    //             >;
    //
    //             sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN>;
    //         };

    nav_layer {
      // TODO: Some binds are waiting for shifted keycode support.
      // ---------------------------------------------------------------------------------------------------------
      // |       |      |      |      |       |      |               |      |      |      |       |      | Sleep |
      // |       |      |      |      |       |      |               | HOME |PG_DN |PG_UP | END   |      |       |
      // | CAPS  |      |      |      |       |      |               | LEFT | DOWN |  UP  | RIGHT |      |       |
      // |       | UNDO | CUT  | COPY | PASTE |      |      |  |     |      |      |      |       |      |       |
      //                |      |      |       |      |      |  |  }  |  ]   |      |      |       |
      bindings = <
          // clang-format off
&trans     &trans     &trans    &trans     &trans      &trans                   &trans   &trans    &trans    &trans       &trans    &kp C_SLEEP
&trans     &trans     &trans    &trans     &trans      &trans                   &kp HOME &kp PG_DN &kp PG_UP &kp END      &kp PSCRN &trans
&caps_word &trans     &trans    &trans     &trans      &trans                   &kp LEFT &kp DOWN  &kp UP    &kp RIGHT    &trans    &trans
&trans     &kp K_UNDO &kp K_CUT &kp K_COPY &kp K_PASTE &trans &trans   &trans   &trans   &trans    &trans    &trans       &trans    &trans
                      &trans    &trans     &trans      &trans &trans   &kp RBRC &kp RBKT &trans    &trans    &kp LC(BSPC)
          // clang-format on
          >;

      sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp C_NEXT C_PREV>;
    };

    sym_layer {
      // ------------------------------------------------------------------------------------------------
      // |  `  |  F1  |  F2  |  F3  |  F4  |  F5 |                |  F6 |  F7 |  F8 |  F9 | F10 |  F11  |
      // |     |  !   |  @   |  #   |  $   |  %  |                |  ^  |  &  |  *  |     |     |  F12  |
      // |     |      |      |      |      |  +  |                |  -  |     |     |     |     |       |
      // |     |      |      |      |      |  =  |      |  |      |  _  |     |     |     |     |       |
      //              |      |      |      |  [  |  {   |  |      |     |     |     |     |
      bindings = <
          // clang-format off
&kp GRAVE &kp F1   &kp F2    &kp F3      &kp F4    &kp F5                        &kp F6    &kp F7   &kp F8    &kp F9 &kp F10  &kp F11
&trans    &kp EXCL &kp AT    &kp HASH    &kp DLLR  &kp PRCNT                     &kp CARET &kp AMPS &kp ASTRK &trans &trans   &kp F12
&trans    &trans   &trans    &trans      &trans    &kp KP_PLUS                   &kp MINUS &trans   &trans    &trans &trans   &trans
&trans    &trans   &trans    &trans      &trans    &kp EQUAL   &trans    &trans  &kp UNDER &trans   &trans    &trans &trans   &trans
                   &trans    &trans      &trans    &kp LBKT    &kp LBRC  &trans  &trans    &trans   &trans    &trans
          // clang-format on
          >;

      sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    };

    conf_layer {
      // ------------------------------------------------------------------------------------------------------------
      // |BTCLR  |  BT1  |  BT2  |  BT3  |  BT4  |  BT5  |                |      |  7  |  8  |  9  |  +  | Sleep |
      // |EXTPWR |RGB_EFF|RGB_HUI|RGB_SAI|RGB_BRI|RGB_SPI|                |      |  4  |  5  |  6  |  -  | Ins   |
      // |       |RGB_EFR|RGB_HUD|RGB_SAD|RGB_BRD|RGB_SPD|                |      |  1  |  2  |  3  |  *  | Scroll|
      // |OUT_TOG|       |       |       |       |       |RGB_TOG| |      |      |  0  |  =  |  .  |  /  | Num   |
      //                 |       |       |       |       |       | |      |      |     |     |     |
      bindings = <
          // clang-format off
&bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                           &none &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_PLUS     &kp C_SLEEP
&ext_power EP_TOG &rgb_ug RGB_EFF &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI                        &none &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_MINUS    &kp INS
&none             &rgb_ug RGB_EFR &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD                        &none &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_ASTERISK &kp SLCK
&out OUT_TOG      &none           &none           &none           &none           &none           &rgb_ug RGB_TOG  &none &none &kp KP_N0 &kp EQUAL &kp KP_DOT &kp KP_SLASH    &kp KP_NUM
                                  &none           &trans          &trans          &none           &none            &none &none &none     &none     &none
          // clang-format on
          >;
    };
  };
};
